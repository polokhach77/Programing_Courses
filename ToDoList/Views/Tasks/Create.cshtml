@model ToDoList.Models.Tasks

@{
    ViewBag.Title = "Create";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <title>Document</title>


    <style>
        body {
            width: 100vw;
            height: 100vh;
            position: absolute;
        }

        #canvas {
            display: block;
            width: auto;
            height: 100%;
            margin-left: -25%;
        }

        .create {
            position: absolute;
            margin-top: -50%;
            text-align: center;
            font-family: 'Courgette', cursive;
            font-family: 'Grape Nuts', cursive;
            font-size:15px;
        }

            .create fieldset {
                width: 600px;
                height: 500px;
                background-image: linear-gradient(to right, #f242a691, #40e4958a, #26ea8ba0, #eb09c98e);
                border-radius: 20px 20px;
                color: rgb(198, 15, 82);
            }
        .create3 input {
            background-image: linear-gradient(to right, #0ba360, #3cba92, #30dd8a, #2bb673);
            box-shadow: 0 4px 15px 0 rgba(23, 168, 108, 0.75);
            color: papayawhip;
            margin: 7%;
            width: 150px;
            height: 50px;
            border-radius: 20px 20px;
        }
            .create3 input:hover {
                background-position: 100% 0;
                moz-transition: all .4s ease-in-out;
                -o-transition: all .4s ease-in-out;
                -webkit-transition: all .4s ease-in-out;
                transition: all .4s ease-in-out;
            }

            .create3 input:focus {
                outline: none;
            }
    </style>
</head>
    
<body>
    <div class="create2">
        <canvas id="canvas"></canvas>
        <script>
            function random(low, high) {
                return Math.random() * (high - low) + low;
            }

            class Visual {
                constructor() {
                    this.canvas = document.querySelector('#canvas');
                    this.context = this.canvas.getContext('2d');
                    this.canvasWidth = 0;
                    this.canvasHeight = 0;
                    this.particleLength = 150;
                    this.particles = [];
                    this.particleMaxRadius = 8;

                    this.handleMouseMoveBind = this.handleMouseMove.bind(this);
                    this.handleClickBind = this.handleClick.bind(this);
                    this.handleResizeBind = this.handleResize.bind(this);

                    this.initialize();
                    this.render();
                }

                initialize() {
                    this.resizeCanvas();
                    for (let i = 0; i < this.particleLength; i++) {
                        this.particles.push(this.createParticle(i));
                    }
                    this.bind();
                }

                bind() {
                    document.body.addEventListener('mousemove', this.handleMouseMoveBind, false);
                    document.body.addEventListener('click', this.handleClickBind, false);
                    window.addEventListener('resize', this.handleResizeBind, false);
                }

                unbind() {
                    document.body.removeEventListener('mousemove', this.handleMouseMoveBind, false);
                    document.body.removeEventListener('click', this.handleClickBind, false);
                    window.removeEventListener('resize', this.handleResizeBind, false);
                }

                handleMouseMove(e) {
                    this.enlargeParticle(e.clientX, e.clientY);
                }

                handleClick(e) {
                    this.burstParticle(e.clientX, e.clientY);
                }

                handleResize() {
                    this.resizeCanvas();
                }

                resizeCanvas() {
                    this.canvasWidth = document.body.offsetWidth;
                    this.canvasHeight = document.body.offsetHeight;
                    this.canvas.width = this.canvasWidth * window.devicePixelRatio;
                    this.canvas.height = this.canvasHeight * window.devicePixelRatio;
                    this.context = this.canvas.getContext('2d');
                    this.context.scale(window.devicePixelRatio, window.devicePixelRatio);
                }

                createParticle(id, isRecreate) {
                    const radius = random(1, this.particleMaxRadius);
                    const x = isRecreate ? -radius - random(0, this.canvasWidth) : random(0, this.canvasWidth);
                    let y = random(this.canvasHeight / 2 - 150, this.canvasHeight / 2 + 150);
                    y += random(-100, 100);
                    const alpha = random(0.05, 1);

                    return {
                        id: id,
                        x: x,
                        y: y,
                        startY: y,
                        radius: radius,
                        defaultRadius: radius,
                        startAngle: 0,
                        endAngle: Math.PI * 2,
                        alpha: alpha,
                        color: { r: random(0, 100), g: random(0, 100), b: 255 },
                        speed: alpha + 1,
                        amplitude: random(50, 200),
                        isBurst: false
                    };
                }

                drawParticles() {
                    this.particles.forEach(particle => {
                        // 位置情報更新
                        this.moveParticle(particle);

                        // particle描画
                        this.context.beginPath();
                        this.context.fillStyle = `rgba(${particle.color.r}, ${particle.color.g}, ${particle.color.b}, ${particle.alpha})`;
                        this.context.arc(particle.x, particle.y, particle.radius, particle.startAngle, particle.endAngle);
                        this.context.fill();
                    });
                }

                moveParticle(particle) {
                    particle.x += particle.speed;
                    particle.y = particle.startY + particle.amplitude * Math.sin(((particle.x / 5) * Math.PI) / 180);
                }

                enlargeParticle(clientX, clientY) {
                    this.particles.forEach(particle => {
                        if (particle.isBurst) return;

                        const distance = Math.hypot(particle.x - clientX, particle.y - clientY);

                        if (distance <= 100) {
                            const scaling = (100 - distance) / 1.5;
                            TweenMax.to(particle, 0.5, {
                                radius: particle.defaultRadius + scaling,
                                ease: Power2.easeOut
                            });
                        } else {
                            TweenMax.to(particle, 0.5, {
                                radius: particle.defaultRadius,
                                ease: Power2.easeOut
                            });
                        }
                    });
                }

                burstParticle(clientX, clientY) {
                    this.particles.forEach(particle => {
                        const distance = Math.hypot(particle.x - clientX, particle.y - clientY);

                        if (distance <= 100) {
                            particle.isBurst = true;
                            TweenMax.to(particle, 0.5, {
                                radius: particle.defaultRadius + 200,
                                alpha: 0,
                                ease: Power2.easeOut,
                                onComplete: () => {
                                    this.particles[particle.id] = this.createParticle(particle.id, true);
                                }
                            });
                        }
                    });
                }

                render() {
                    // canvas初期化
                    this.context.clearRect(0, 0, this.canvasWidth + this.particleMaxRadius * 2, this.canvasHeight);

                    // particleを描画
                    this.drawParticles();

                    // 画面から消えたら新しいparticleに差し替え
                    this.particles.forEach(particle => {
                        if (particle.x - particle.radius >= this.canvasWidth) {
                            this.particles[particle.id] = this.createParticle(particle.id, true);
                        }
                    });

                    requestAnimationFrame(this.render.bind(this));
                }
            }

            new Visual();
        </script>
    </div>
    <div class="create">
        <h2>Create</h2>
        <fieldset>

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Tasks</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, "Full name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, "Course", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.User_id, "User", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("User_id", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.User_id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Status_id, "Mentor", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("Status_id", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Status_id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DeadLine, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DeadLine, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DeadLine, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <div class="create3">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            </div>
            }

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }
        </fieldset>
    </div>
</body>
</html>